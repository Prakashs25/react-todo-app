{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updatedlist","filter","item","input","className","src","logo","alt","width","height","type","placeholder","required","onChange","e","updateInput","target","autoFocus","onClick","addItem","disabled","length","map","key","deleteItem","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,8MCsG5BC,G,wDAhGd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,QAAS,GACTC,KAAM,IAJW,E,oDAQXC,GACP,GAAkB,KAAdA,EAAkB,CACrB,IAAMF,EAAU,CACfG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAEHN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACbT,OACAD,QAAS,Q,iCAKDG,GACV,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACpDK,KAAKE,SAAS,CAAET,KAAMU,M,kCAGXG,GACXN,KAAKE,SAAS,CAAEV,QAASc,M,+BAGhB,IAAD,OACR,OACC,yBAAKC,UAAU,yCACd,yBAAKA,UAAU,8BACd,yBAAKA,UAAU,oCACd,yBAAKA,UAAU,qBAAqBC,IAAKC,IAAMC,IAAI,iBAAiBC,MAAM,MAAMC,OAAO,QACvF,wBAAIL,UAAU,IAAd,iBAGF,yBAAKA,UAAU,8BACd,yBAAKA,UAAU,oCACd,uBAAGA,UAAU,QAAb,sCACA,uBAAGA,UAAU,QAAb,sCACA,uBAAGA,UAAU,QAAb,2BAGF,8BACC,yBAAKA,UAAU,cACd,yBAAKA,UAAU,mCACd,yBAAKA,UAAU,kDACd,2BAAOM,KAAK,OAAON,UAAU,4BAA4BO,YAAY,eAAeC,UAAQ,EAACjB,MAAOE,KAAKT,MAAMC,QAASwB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOrB,QAAQsB,WAAS,KAEnL,yBAAKb,UAAU,iDACd,4BAAQM,KAAK,SAASN,UAAU,6DAA6Dc,QAAS,kBAAM,EAAKC,QAAQ,EAAK/B,MAAMC,UAAU+B,UAAWvB,KAAKT,MAAMC,QAAQgC,QAA5K,kBAKJ,yBAAKjB,UAAU,8BACd,yBAAKA,UAAU,wBACd,wBAAIA,UAAU,4BACZP,KAAKT,MAAME,KAAKgC,KAAI,SAAApB,GACpB,OACC,wBAAIqB,IAAKrB,EAAKV,GACbY,UAAU,6BACV,yBAAKA,UAAU,iBACd,2BAAOM,KAAK,WAAWN,UAAU,mBAAmBT,MAAM,MAE3D,yBAAKS,UAAU,QACbF,EAAKP,OAEP,yBAAKS,UAAU,mBACd,4BAAQA,UAAU,8BAA8Bc,QAAS,kBAAM,EAAKM,WAAWtB,EAAKV,MAApF,kBAML,yBAAKY,UAAU,WAGjB,4BAAQA,UAAU,uCACjB,yBAAKA,UAAU,wCAAf,eACE,uBAAGA,UAAU,kCAAkCqB,KAAK,kCAAkC,0BAAMrB,UAAU,cAAhB,sB,GA1F3EsB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d610d07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnewItem: \"\",\n\t\t\tlist: []\n\t\t};\n\t}\n\n\taddItem(todoValue) {\n\t\tif (todoValue !== \"\") {\n\t\t\tconst newItem = {\n\t\t\t\tid: Date.now(),\n\t\t\t\tvalue: todoValue,\n\t\t\t\tisDone: false\n\t\t\t};\n\t\t\tconst list = [...this.state.list];\n\t\t\tlist.push(newItem);\n\n\t\t\tthis.setState({\n\t\t\t\tlist,\n\t\t\t\tnewItem: \"\"\n\t\t\t});\n\t\t}\n\t}\n\n\tdeleteItem(id) {\n\t\tconst list = [...this.state.list];\n\t\tconst updatedlist = list.filter(item => item.id !== id);\n\t\tthis.setState({ list: updatedlist });\n\t}\n\n\tupdateInput(input) {\n\t\tthis.setState({ newItem: input });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container-fluid bg-dark h-100 my-auto\">\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"col-12 col-md-6 pt-2 text-center\">\n\t\t\t\t\t\t<img className=\"img-fluid App-logo\" src={logo} alt=\"logo goes here\" width=\"150\" height=\"150\" />\n\t\t\t\t\t\t<h1 className=\"\">A To Do App</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"col-12 col-md-5 pt-2 text-center\">\n\t\t\t\t\t\t<p className=\"lead\">Write something and click Add Todo</p>\n\t\t\t\t\t\t<p className=\"lead\">Checkbox is to mark finished tasks</p>\n\t\t\t\t\t\t<p className=\"lead\">Add an Item Below....</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<form>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<div className=\"row justify-content-center py-3\">\n\t\t\t\t\t\t\t<div className=\"col-12 col-md-4 text-center my-auto h-100 py-2\">\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control rounded-pill\" placeholder=\"Write a Todo\" required value={this.state.newItem} onChange={e => this.updateInput(e.target.value)} autoFocus />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-6 col-md-2 text-center my-auto h-100 py-2\">\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-light text-dark font-weight-bold rounded-pill px-5\" onClick={() => this.addItem(this.state.newItem)} disabled={!this.state.newItem.length}> Add Todo </button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"col-12 col-md-7 pt-3\">\n\t\t\t\t\t\t<ul className=\"list-group list-unstyled\">\n\t\t\t\t\t\t\t{this.state.list.map(item => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={item.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"list-group-item text-dark\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"check py-auto\">\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" className=\"form-check-input\" value=\"\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"px-3\">\n\t\t\t\t\t\t\t\t\t\t\t{item.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"buttons py-auto\">\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-danger rounded-pill\" onClick={() => this.deleteItem(item.id)} > Delete </button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div className=\"py-5\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<footer className=\"page-footer bg-primary fixed-bottom\">\n\t\t\t\t\t<div className=\"footer-copyright text-center h6 py-3\">Developed by \n\t\t\t\t\t\t\t<a className=\"text-white text-decoration-none\" href=\"mailto:prakashs25698@gmail.com\" ><span className=\"text-light\"> PRAKASH S</span></a>\n\t\t\t\t\t</div>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}